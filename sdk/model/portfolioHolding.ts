/**
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1387
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { CurrencyAndAmount } from './currencyAndAmount';
import { PerpetualProperty } from './perpetualProperty';
import { Property } from './property';
import { Transaction } from './transaction';

/**
* A list of holdings.
*/
export class PortfolioHolding {
    /**
    * The unqiue Lusid Instrument Id (LUID) of the instrument that the holding is in.
    */
    'instrumentUid': string;
    /**
    * The sub-holding properties which identify the holding. Each property will be from the \'Transaction\' domain. These are configured when a transaction portfolio is created.
    */
    'subHoldingKeys'?: { [key: string]: PerpetualProperty; };
    /**
    * The properties which have been requested to be decorated onto the holding. These will be from the \'Instrument\' or \'Holding\' domain.
    */
    'properties'?: { [key: string]: Property; };
    /**
    * The type of the holding e.g. Position, Balance, CashCommitment, Receivable, ForwardFX etc.
    */
    'holdingType': string;
    /**
    * The total number of units of the holding.
    */
    'units': number;
    /**
    * The total number of settled units of the holding.
    */
    'settledUnits': number;
    'cost': CurrencyAndAmount;
    'costPortfolioCcy': CurrencyAndAmount;
    'transaction'?: Transaction;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "instrumentUid",
            "baseName": "instrumentUid",
            "type": "string"
        },
        {
            "name": "subHoldingKeys",
            "baseName": "subHoldingKeys",
            "type": "{ [key: string]: PerpetualProperty; }"
        },
        {
            "name": "properties",
            "baseName": "properties",
            "type": "{ [key: string]: Property; }"
        },
        {
            "name": "holdingType",
            "baseName": "holdingType",
            "type": "string"
        },
        {
            "name": "units",
            "baseName": "units",
            "type": "number"
        },
        {
            "name": "settledUnits",
            "baseName": "settledUnits",
            "type": "number"
        },
        {
            "name": "cost",
            "baseName": "cost",
            "type": "CurrencyAndAmount"
        },
        {
            "name": "costPortfolioCcy",
            "baseName": "costPortfolioCcy",
            "type": "CurrencyAndAmount"
        },
        {
            "name": "transaction",
            "baseName": "transaction",
            "type": "Transaction"
        }    ];

    static getAttributeTypeMap() {
        return PortfolioHolding.attributeTypeMap;
    }
}

