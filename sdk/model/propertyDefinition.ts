/**
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1380
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Link } from './link';
import { ResourceId } from './resourceId';

/**
* A list of property definitions.
*/
export class PropertyDefinition {
    /**
    * The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.
    */
    'href'?: string;
    /**
    * The property key which uniquely identifies the property. The format for the property key is {domain}/{scope}/{code}, e.g. \'Portfolio/Manager/Id\'.
    */
    'key'?: string;
    /**
    * The type of values that can be associated with this property. This is defined by the property\'s data type.
    */
    'valueType'?: PropertyDefinition.ValueTypeEnum;
    /**
    * Whether or not a value is always required for this property.
    */
    'valueRequired'?: boolean;
    /**
    * The display name of the property.
    */
    'displayName'?: string;
    'dataTypeId'?: ResourceId;
    /**
    * Describes how the property\'s values can change over time.
    */
    'lifeTime'?: PropertyDefinition.LifeTimeEnum;
    /**
    * The type of the property.
    */
    'type'?: PropertyDefinition.TypeEnum;
    /**
    * The units that can be associated with the property\'s values. This is defined by the property\'s data type.
    */
    'unitSchema'?: PropertyDefinition.UnitSchemaEnum;
    /**
    * The domain that the property exists in.
    */
    'domain'?: PropertyDefinition.DomainEnum;
    /**
    * The scope that the property exists in.
    */
    'scope'?: string;
    /**
    * The code of the property. Together with the domain and scope this uniquely identifies the property.
    */
    'code'?: string;
    /**
    * Describes the uniqueness and cardinality of the property for entity objects under the property domain specified in Key.
    */
    'constraintStyle'?: string;
    'links'?: Array<Link>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "href",
            "baseName": "href",
            "type": "string"
        },
        {
            "name": "key",
            "baseName": "key",
            "type": "string"
        },
        {
            "name": "valueType",
            "baseName": "valueType",
            "type": "PropertyDefinition.ValueTypeEnum"
        },
        {
            "name": "valueRequired",
            "baseName": "valueRequired",
            "type": "boolean"
        },
        {
            "name": "displayName",
            "baseName": "displayName",
            "type": "string"
        },
        {
            "name": "dataTypeId",
            "baseName": "dataTypeId",
            "type": "ResourceId"
        },
        {
            "name": "lifeTime",
            "baseName": "lifeTime",
            "type": "PropertyDefinition.LifeTimeEnum"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "PropertyDefinition.TypeEnum"
        },
        {
            "name": "unitSchema",
            "baseName": "unitSchema",
            "type": "PropertyDefinition.UnitSchemaEnum"
        },
        {
            "name": "domain",
            "baseName": "domain",
            "type": "PropertyDefinition.DomainEnum"
        },
        {
            "name": "scope",
            "baseName": "scope",
            "type": "string"
        },
        {
            "name": "code",
            "baseName": "code",
            "type": "string"
        },
        {
            "name": "constraintStyle",
            "baseName": "constraintStyle",
            "type": "string"
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<Link>"
        }    ];

    static getAttributeTypeMap() {
        return PropertyDefinition.attributeTypeMap;
    }
}

export namespace PropertyDefinition {
    export enum ValueTypeEnum {
        String = <any> 'String',
        Int = <any> 'Int',
        Decimal = <any> 'Decimal',
        DateTime = <any> 'DateTime',
        Boolean = <any> 'Boolean',
        Map = <any> 'Map',
        List = <any> 'List',
        PropertyArray = <any> 'PropertyArray',
        Percentage = <any> 'Percentage',
        BenchmarkType = <any> 'BenchmarkType',
        Code = <any> 'Code',
        Id = <any> 'Id',
        Uri = <any> 'Uri',
        ArrayOfIds = <any> 'ArrayOfIds',
        ArrayOfTransactionAliases = <any> 'ArrayOfTransactionAliases',
        ArrayofTransactionMovements = <any> 'ArrayofTransactionMovements',
        ArrayofUnits = <any> 'ArrayofUnits',
        StringArray = <any> 'StringArray',
        CurrencyAndAmount = <any> 'CurrencyAndAmount',
        TradePrice = <any> 'TradePrice',
        UnitCreation = <any> 'UnitCreation',
        Currency = <any> 'Currency',
        UserId = <any> 'UserId',
        MetricValue = <any> 'MetricValue',
        QuoteId = <any> 'QuoteId',
        QuoteSeriesId = <any> 'QuoteSeriesId',
        ResourceId = <any> 'ResourceId',
        ResultValue = <any> 'ResultValue',
        CutLocalTime = <any> 'CutLocalTime',
        DateOrCutLabel = <any> 'DateOrCutLabel',
        Transition = <any> 'Transition',
        StructuredData = <any> 'StructuredData',
        StructuredDataId = <any> 'StructuredDataId',
        ConfigurationRecipe = <any> 'ConfigurationRecipe',
        ConfigurationRecipeSnippet = <any> 'ConfigurationRecipeSnippet',
        StructuredResultDataId = <any> 'StructuredResultDataId',
        StructuredResultData = <any> 'StructuredResultData',
        DataMapping = <any> 'DataMapping',
        LusidInstrument = <any> 'LusidInstrument',
        WeightedInstrument = <any> 'WeightedInstrument',
        Tenor = <any> 'Tenor',
        CdsDetailSpecifications = <any> 'CdsDetailSpecifications',
        FlowConventions = <any> 'FlowConventions',
        OrderId = <any> 'OrderId'
    }
    export enum LifeTimeEnum {
        Perpetual = <any> 'Perpetual',
        TimeVariant = <any> 'TimeVariant'
    }
    export enum TypeEnum {
        Label = <any> 'Label',
        Metric = <any> 'Metric',
        Information = <any> 'Information'
    }
    export enum UnitSchemaEnum {
        NoUnits = <any> 'NoUnits',
        Basic = <any> 'Basic',
        Iso4217Currency = <any> 'Iso4217Currency'
    }
    export enum DomainEnum {
        NotDefined = <any> 'NotDefined',
        Transaction = <any> 'Transaction',
        Portfolio = <any> 'Portfolio',
        Holding = <any> 'Holding',
        ReferenceHolding = <any> 'ReferenceHolding',
        TransactionConfiguration = <any> 'TransactionConfiguration',
        Instrument = <any> 'Instrument',
        CutLabelDefinition = <any> 'CutLabelDefinition',
        Analytic = <any> 'Analytic',
        PortfolioGroup = <any> 'PortfolioGroup',
        Person = <any> 'Person',
        AccessMetadata = <any> 'AccessMetadata',
        Order = <any> 'Order',
        UnitResult = <any> 'UnitResult',
        MarketData = <any> 'MarketData',
        ConfigurationRecipe = <any> 'ConfigurationRecipe',
        Allocation = <any> 'Allocation'
    }
}
